#!/usr/bin/env python3
# AI-Generated by CAFE v5.1-ACG - MIT License
"""Cafe-velocity integration for tower-climb project."""

import sys
import json
from pathlib import Path
from datetime import datetime

def setup_velocity_tracker():
    """Set up velocity tracker for tower-climb project."""
    try:
        from cafe_velocity import VelocityTracker
        
        # Create project-specific velocity data directory
        project_root = Path(__file__).parent.parent
        velocity_data_dir = project_root / ".velocity"
        velocity_data_dir.mkdir(exist_ok=True)
        
        # Initialize tracker
        tracker = VelocityTracker(data_dir=velocity_data_dir)
        
        print("[OK] Cafe-velocity integration successful")
        print(f"[INFO] Data directory: {velocity_data_dir}")
        print(f"[INFO] Session ID: {tracker.session.session_id if tracker.session else 'No session'}")
        
        # Create a simple example of tracking a contract
        print("\n[INFO] Example usage:")
        print("  from scripts.velocity_integration import get_tracker")
        print("  tracker = get_tracker()")
        print("  tracker.start_contract('P0-S1-C1')")
        print("  # ... do work ...")
        print("  tracker.complete_contract('P0-S1-C1', coverage=95.0)")
        
        return tracker
        
    except ImportError:
        print("[ERROR] cafe-velocity not found")
        print("[INFO] Install from: C:\\Aeturnis\\PROJECTS\\ASCENT\\cafe-velocity")
        return None
    except Exception as e:
        print(f"[ERROR] {type(e).__name__}: {e}")
        return None

def get_latest_session_id(velocity_dir: Path) -> str | None:
    """Find the most recent active session."""
    if not velocity_dir.exists():
        return None
    
    sessions = []
    for session_file in velocity_dir.glob("session_*.json"):
        if session_file.name.endswith(".bak"):
            continue
        try:
            with open(session_file) as f:
                data = json.load(f)
                if data.get("is_active", False):
                    sessions.append((data["session_id"], data["start_time"]))
        except:
            continue
    
    if sessions:
        # Return the most recent active session
        sessions.sort(key=lambda x: x[1], reverse=True)
        return sessions[0][0]
    return None

def get_tracker():
    """Get or create velocity tracker instance with session persistence."""
    from cafe_velocity import VelocityTracker
    project_root = Path(__file__).parent.parent
    velocity_data_dir = project_root / ".velocity"
    velocity_data_dir.mkdir(exist_ok=True)
    
    # Try to resume existing session
    session_id = get_latest_session_id(velocity_data_dir)
    if session_id:
        return VelocityTracker(data_dir=velocity_data_dir, session_id=session_id)
    
    # Create new session if none exists
    return VelocityTracker(data_dir=velocity_data_dir)

if __name__ == "__main__":
    setup_velocity_tracker()