# AI-Generated by CAFE v5.1-ACG - MIT License
"""Debug display system for performance metrics."""

from typing import Optional

import pygame

from tower_climb.core.fps_counter import FPSCounter


class DebugDisplay:
    """Manages debug information display."""

    def __init__(self):
        """Initialize debug display system."""
        self._visible = False
        self._fps_counter = FPSCounter(update_interval=1.0)
        self._font: Optional[pygame.font.Font] = None
        self._cached_surface: Optional[pygame.Surface] = None
        self._cached_fps = -1.0
        self._bg_color = (0, 0, 0)
        self._text_color = (255, 255, 255)
        self._bg_alpha = 150
        self._padding = 5

        # Initialize font
        pygame.font.init()
        self._font = pygame.font.Font(None, 14)

    def update(self, dt: float) -> None:
        """Update FPS calculation.

        Args:
            dt: Delta time in seconds
        """
        self._fps_counter.tick(dt)

        # Invalidate cache if FPS changed
        current_fps = self._fps_counter.get_fps()
        if current_fps != self._cached_fps:
            self._cached_fps = current_fps
            self._cached_surface = None

    def draw(self, surface: pygame.Surface) -> None:
        """Draw debug info to surface.

        Args:
            surface: Surface to draw on
        """
        if not self._visible:
            return

        # Render text if not cached
        if self._cached_surface is None:
            self._render_text()

        if self._cached_surface:
            surface.blit(self._cached_surface, (10, 10))

    def _render_text(self) -> None:
        """Render debug text to cached surface."""
        if not self._font:
            return

        # Format debug info
        fps = self._fps_counter.get_fps()
        frame_time = self._fps_counter.get_frame_time()
        text = f"FPS: {fps:.1f} | Frame: {frame_time:.3f}ms"

        # Render text
        text_surface = self._font.render(text, True, self._text_color)
        text_rect = text_surface.get_rect()

        # Create background
        bg_width = text_rect.width + self._padding * 2
        bg_height = text_rect.height + self._padding * 2
        bg_surface = pygame.Surface((bg_width, bg_height))
        bg_surface.fill(self._bg_color)
        bg_surface.set_alpha(self._bg_alpha)

        # Create final surface with alpha support
        self._cached_surface = pygame.Surface(
            (bg_width, bg_height), pygame.SRCALPHA
        )
        self._cached_surface.blit(bg_surface, (0, 0))
        self._cached_surface.blit(text_surface, (self._padding, self._padding))

    def toggle(self) -> None:
        """Toggle debug display visibility."""
        self._visible = not self._visible

    def is_visible(self) -> bool:
        """Check if debug display is visible.

        Returns:
            True if visible, False otherwise
        """
        return self._visible
