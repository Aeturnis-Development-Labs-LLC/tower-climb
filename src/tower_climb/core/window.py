# AI-Generated by CAFE v5.1-ACG - MIT License
"""Window management system for Tower Climb."""

from typing import Optional, Tuple

import pygame


class Window:
    """Game window manager."""

    def __init__(self, width: int = 800, height: int = 600, title: str = "Tower Climb"):
        """Initialize game window.

        Args:
            width: Window width in pixels
            height: Window height in pixels
            title: Window title text
        """
        self.width = width
        self.height = height
        self.title = title
        self._screen: Optional[pygame.Surface] = None
        self._clock: Optional[pygame.time.Clock] = None
        self._running = False

    def initialize(self) -> None:
        """Initialize Pygame and create window."""
        # Initialize Pygame
        result = pygame.init()
        if result[1] > 0:
            raise RuntimeError(f"PYGAME_INIT_FAILED: {result[1]} modules failed")

        # Create window
        try:
            self._screen = pygame.display.set_mode((self.width, self.height))
        except pygame.error as e:
            raise RuntimeError(f"DISPLAY_MODE_UNSUPPORTED: {e}")

        # Set window properties
        pygame.display.set_caption(self.title)

        # Create clock for timing
        self._clock = pygame.time.Clock()

        # Window is now running
        self._running = True

    def handle_events(self) -> bool:
        """Process window events.

        Returns:
            False if window should close, True otherwise
        """
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                return False
        return True

    def clear(self, color: Tuple[int, int, int] = (0, 0, 0)) -> None:
        """Clear the screen with specified color."""
        if self._screen:
            self._screen.fill(color)

    def present(self) -> None:
        """Present the drawn frame to screen."""
        if self._screen:
            pygame.display.flip()

    def get_surface(self) -> Optional[pygame.Surface]:
        """Get the window surface for drawing."""
        return self._screen

    def quit(self) -> None:
        """Quit pygame and cleanup."""
        self._running = False
        pygame.quit()

    @property
    def is_running(self) -> bool:
        """Check if window is running."""
        return self._running
