# AI-Generated by CAFE v5.1-ACG - CC BY-NC 4.0 License
"""FPS counter implementation."""

from collections import deque
from typing import Deque


class FPSCounter:
    """Tracks and calculates frames per second."""

    def __init__(self, update_interval: float = 1.0):
        """Initialize FPS counter with update interval.

        Args:
            update_interval: How often to update FPS calculation (seconds)
        """
        self.update_interval = update_interval
        self._frame_times: Deque[float] = deque()
        self._accumulated_time = 0.0
        self._last_fps = 0.0
        self._last_update_time = 0.0
        self._frame_count = 0

    def tick(self, dt: float) -> None:
        """Record frame time.

        Args:
            dt: Delta time for this frame in seconds
        """
        # Ignore zero or negative delta times
        if dt <= 0:
            return

        self._frame_times.append(dt)
        self._accumulated_time += dt
        self._frame_count += 1

        # Remove old frames beyond update interval
        while self._accumulated_time > self.update_interval and self._frame_times:
            old_dt = self._frame_times.popleft()
            self._accumulated_time -= old_dt
            self._frame_count -= 1

        # Update FPS calculation
        if self._accumulated_time > 0 and self._frame_count > 0:
            self._last_fps = self._frame_count / self._accumulated_time

    def get_fps(self) -> float:
        """Get current FPS value.

        Returns:
            Current frames per second
        """
        return self._last_fps

    def get_frame_time(self) -> float:
        """Get average frame time in ms.

        Returns:
            Average frame time in milliseconds
        """
        if not self._frame_times:
            return 0.0

        avg_seconds = sum(self._frame_times) / len(self._frame_times)
        return avg_seconds * 1000.0  # Convert to milliseconds
