# AI-Generated by CAFE v5.1-ACG - MIT License
"""Core game loop implementation."""

import time
from typing import Optional

from tower_climb.core.game_state import GameState
from tower_climb.core.window import Window


class GameLoop:
    """Main game loop with fixed timestep."""

    def __init__(self, target_fps: int = 60):
        """Initialize game loop with target framerate."""
        self.target_fps = target_fps
        self.target_frame_time = 1.0 / target_fps
        self._running = False
        self._current_state: Optional[GameState] = None
        self._next_state: Optional[GameState] = None

    def run(self, window: Window) -> None:
        """Run the main game loop."""
        self._running = True
        last_time = time.perf_counter()

        while self._running and window.handle_events():
            current_time = time.perf_counter()
            raw_dt = current_time - last_time
            last_time = current_time

            # Cap delta time at 50ms to prevent spiral of death
            dt = min(raw_dt, 0.05)

            # Handle state transitions before update
            if self._next_state is not None:
                if self._current_state:
                    self._current_state.exit()
                self._current_state = self._next_state
                self._next_state = None
                if self._current_state:
                    self._current_state.enter()

            if self._current_state:
                self._current_state.update(dt)
                self._current_state.draw(window)

            window.present()

            # Sleep to maintain target framerate
            frame_time = time.perf_counter() - current_time
            if frame_time < self.target_frame_time:
                time.sleep(self.target_frame_time - frame_time)

        # Clean exit
        if self._current_state:
            self._current_state.exit()

    def stop(self) -> None:
        """Request loop termination."""
        self._running = False

    def set_state(self, state: GameState) -> None:
        """Change active game state."""
        if self._running:
            # Defer state change to beginning of next frame
            self._next_state = state
        else:
            # Not running, change immediately
            if self._current_state:
                self._current_state.exit()
            self._current_state = state
            if self._current_state:
                self._current_state.enter()
