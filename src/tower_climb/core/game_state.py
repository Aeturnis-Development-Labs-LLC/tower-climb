# AI-Generated by CAFE v5.1-ACG - CC BY-NC 4.0 License
"""Abstract base class for game states."""

from abc import ABC, abstractmethod
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    import pygame

from tower_climb.core.window import Window


class GameState(ABC):
    """Abstract base class for game states."""

    @abstractmethod
    def enter(self) -> None:
        """Called when state becomes active."""
        pass

    @abstractmethod
    def exit(self) -> None:
        """Called when state becomes inactive."""
        pass

    @abstractmethod
    def update(self, dt: float) -> None:
        """Update state logic. dt in seconds."""
        pass

    @abstractmethod
    def draw(self, window: Window) -> None:
        """Draw state to window."""
        pass

    @abstractmethod
    def handle_event(self, event: "pygame.event.Event") -> None:
        """Handle pygame events."""
        pass

    def pause(self) -> None:
        """Called when state is paused (optional)."""
        pass

    def resume(self) -> None:
        """Called when state is resumed (optional)."""
        pass
