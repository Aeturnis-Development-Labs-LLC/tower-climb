# AI-Generated by CAFE v5.1-ACG - MIT License
"""Tests for FPS counter - Contract P0-S1-C3."""


from tower_climb.core.fps_counter import FPSCounter


class TestFPSCalculation:
    """UTF-Block-P0-S1-C3-T1: FPS Calculation tests."""

    def test_fps_calculation_accuracy(self):
        """Test FPS counter calculates accurately."""
        counter = FPSCounter(update_interval=1.0)

        # Simulate 60 frames at ~16.67ms each
        for _ in range(60):
            counter.tick(0.01667)  # 16.67ms

        fps = counter.get_fps()
        assert 59 <= fps <= 61, f"Expected ~60 FPS, got {fps}"

    def test_updates_once_per_second(self):
        """Test FPS updates continuously with rolling window."""
        counter = FPSCounter(update_interval=1.0)

        # First set of frames (~0.5 seconds at 60fps)
        for _ in range(30):
            counter.tick(0.01667)
        initial_fps = counter.get_fps()

        # FPS should be around 60
        assert 59 <= initial_fps <= 61

        # Add slower frames (~1 second at 30fps)
        for _ in range(30):
            counter.tick(0.03333)  # 30 FPS timing

        # With 1-second rolling window, old 60fps frames are dropped
        # Should now show only recent 30fps frames
        new_fps = counter.get_fps()
        assert 29 <= new_fps <= 31  # Should reflect recent 30 FPS

    def test_rolling_average(self):
        """Test FPS shows rolling average, not instant."""
        counter = FPSCounter(update_interval=0.5)

        # First half second at 60 FPS
        for _ in range(30):
            counter.tick(0.01667)

        # Second half second at 30 FPS (slower)
        for _ in range(15):
            counter.tick(0.03333)

        fps = counter.get_fps()
        # With rolling window, it should show recent 0.5s (15 frames @ 30fps)
        assert 29 <= fps <= 31, f"Expected ~30 FPS for recent window, got {fps}"

    def test_frame_time_precision(self):
        """Test frame time has minimum 3 decimal precision."""
        counter = FPSCounter()

        counter.tick(0.016667)
        counter.tick(0.016668)
        counter.tick(0.016666)

        frame_time = counter.get_frame_time()
        # Check it's returned in milliseconds with precision
        assert isinstance(frame_time, float)
        assert frame_time > 16.0  # Should be ~16.667ms
        assert frame_time < 17.0

        # Verify precision by checking string representation
        frame_str = f"{frame_time:.3f}"
        assert len(frame_str.split(".")[1]) >= 3


class TestFPSCounterEdgeCases:
    """UTF-Block-P0-S1-C3-T1: FPS Calculation edge cases."""

    def test_handles_zero_delta_time(self):
        """Test FPS counter handles zero delta times."""
        counter = FPSCounter()

        # Some systems might report 0 dt occasionally
        counter.tick(0.0)
        counter.tick(0.01667)
        counter.tick(0.0)
        counter.tick(0.01667)

        # Should not crash or return invalid values
        fps = counter.get_fps()
        assert fps >= 0
        assert fps != float("inf")

    def test_handles_large_delta_time(self):
        """Test FPS counter handles large frame spikes."""
        counter = FPSCounter()

        # Normal frames
        for _ in range(10):
            counter.tick(0.01667)

        # Huge spike (1 second freeze)
        counter.tick(1.0)

        # More normal frames
        for _ in range(10):
            counter.tick(0.01667)

        fps = counter.get_fps()
        assert 0 < fps < 60  # Should be much less than 60

    def test_initial_state(self):
        """Test FPS counter initial state before any ticks."""
        counter = FPSCounter()

        # Should return reasonable defaults
        assert counter.get_fps() == 0.0
        assert counter.get_frame_time() == 0.0
