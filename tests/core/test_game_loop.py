# AI-Generated by CAFE v5.1-ACG - MIT License
"""Tests for game loop - Contract P0-S1-C2."""

import time
from unittest.mock import Mock, patch

from tower_climb.core.game_loop import GameLoop
from tower_climb.core.game_state import GameState
from tower_climb.core.window import Window


class MockState(GameState):
    """Mock state for testing."""

    def __init__(self):
        self.enter_called = False
        self.exit_called = False
        self.update_called = False
        self.draw_called = False
        self.update_count = 0
        self.update_times = []

    def enter(self):
        self.enter_called = True

    def exit(self):
        self.exit_called = True

    def update(self, dt):
        self.update_called = True
        self.update_count += 1
        self.update_times.append(dt)

    def draw(self, window):
        self.draw_called = True


class TestGameLoopExecution:
    """UTF-Block-P0-S1-C2-T1: Game Loop Execution tests."""

    def test_game_loop_framerate(self):
        """Test game loop runs at target framerate."""
        loop = GameLoop(target_fps=60)
        state = MockState()
        window = Mock(spec=Window)
        window.handle_events.return_value = True
        window.is_running = True

        # Track timing
        frame_count = 0
        start_time = time.perf_counter()

        def stop_after_time(*args):
            nonlocal frame_count
            frame_count += 1
            # Stop after ~0.1 seconds
            if time.perf_counter() - start_time > 0.1:
                loop.stop()

        state.update = stop_after_time

        # Run loop
        loop.set_state(state)
        loop.run(window)

        # Verify framerate (should be ~6 frames in 0.1s at 60fps)
        assert 5 <= frame_count <= 7, f"Expected ~6 frames, got {frame_count}"

    def test_delta_time_average(self):
        """Test delta time averages to target frame time."""
        loop = GameLoop(target_fps=60)
        state = MockState()
        window = Mock(spec=Window)
        window.handle_events.return_value = True

        # Run for 10 frames
        frame_count = 0

        def count_frames(dt):
            nonlocal frame_count
            frame_count += 1
            state.update_times.append(dt)
            if frame_count >= 10:
                loop.stop()

        state.update = count_frames

        loop.set_state(state)
        loop.run(window)

        # Check average delta time (~16.67ms = 0.01667s)
        avg_dt = sum(state.update_times) / len(state.update_times)
        assert 0.010 <= avg_dt <= 0.025, f"Average dt {avg_dt} out of range"

    def test_no_cpu_spinning(self):
        """Test loop doesn't spin CPU when idle."""
        loop = GameLoop(target_fps=60)
        state = MockState()
        window = Mock(spec=Window)
        window.handle_events.return_value = True

        # Quick update that does nothing
        update_times = []

        def quick_update(dt):
            update_times.append(time.perf_counter())
            if len(update_times) >= 3:
                loop.stop()

        state.update = quick_update

        loop.set_state(state)
        loop.run(window)

        # Check time between updates is at least 15ms (not spinning)
        for i in range(1, len(update_times)):
            frame_time = update_times[i] - update_times[i - 1]
            assert frame_time >= 0.015, "CPU spinning detected"


class TestGameLoopStates:
    """UTF-Block-P0-S1-C2-T2: Game Loop States tests."""

    def test_state_lifecycle(self):
        """Test state enter/exit/update lifecycle."""
        loop = GameLoop()
        state = MockState()
        window = Mock(spec=Window)
        window.handle_events.return_value = True

        # Set state
        loop.set_state(state)
        assert state.enter_called, "State enter() not called"

        # Run one frame
        def stop_after_one(dt):
            state.update_called = True
            loop.stop()

        state.update = stop_after_one
        loop.run(window)

        assert state.update_called, "State update() not called"
        assert state.exit_called, "State exit() not called on loop stop"

    def test_state_transition(self):
        """Test transitioning between states."""
        loop = GameLoop()
        state1 = MockState()
        state2 = MockState()
        window = Mock(spec=Window)
        window.handle_events.return_value = True

        # Start with state1
        loop.set_state(state1)
        assert state1.enter_called

        # Transition to state2
        loop.set_state(state2)
        assert state1.exit_called, "Previous state exit() not called"
        assert state2.enter_called, "New state enter() not called"

    def test_no_update_during_transition(self):
        """Test no updates occur during state transition."""
        loop = GameLoop()
        state1 = MockState()
        state2 = MockState()
        window = Mock(spec=Window)
        window.handle_events.return_value = True

        # Track if update called during transition
        transition_frame = None
        frames_count = 0

        def state1_update(dt):
            nonlocal frames_count
            frames_count += 1
            state1.update_count += 1
            if state1.update_count == 2:
                # Trigger transition
                nonlocal transition_frame
                transition_frame = frames_count
                loop.set_state(state2)

        def state2_update(dt):
            nonlocal frames_count
            frames_count += 1
            state2.update_count += 1
            if state2.update_count >= 3:
                loop.stop()

        state1.update = state1_update
        state2.update = state2_update

        loop.set_state(state1)
        loop.run(window)

        # State2 should not have been updated in the same frame as transition
        # With deferred transitions, state2 updates should start in
        # frame after transition
        assert transition_frame is not None, "Transition didn't occur"
        assert state2.update_count > 0, "State2 was never updated"
        # Transition happens in frame 2, state2 should start updating in
        # frame 3
        assert frames_count >= transition_frame + 1, "Not enough frames"


class TestGameLoopShutdown:
    """UTF-Block-P0-S1-C2-T3: Game Loop Shutdown tests."""

    def test_clean_shutdown(self):
        """Test game loop shuts down cleanly."""
        loop = GameLoop()
        state = MockState()
        window = Mock(spec=Window)
        window.handle_events.return_value = True

        frames = 0

        def update_and_stop(dt):
            nonlocal frames
            frames += 1
            if frames >= 3:
                loop.stop()

        state.update = update_and_stop

        loop.set_state(state)
        start_time = time.perf_counter()
        loop.run(window)
        shutdown_time = time.perf_counter() - start_time

        # Should shutdown quickly
        assert shutdown_time < 0.2, "Shutdown took too long"
        assert state.exit_called, "State exit() not called on shutdown"

    def test_shutdown_via_window_close(self):
        """Test shutdown when window closes."""
        loop = GameLoop()
        state = MockState()
        window = Mock(spec=Window)

        # Simulate window close after 2 frames
        close_sequence = [True, True, False]
        window.handle_events.side_effect = close_sequence
        window.is_running = True

        loop.set_state(state)
        loop.run(window)

        assert state.exit_called, "State not cleaned up on window close"

    def test_current_frame_completes(self):
        """Test current frame completes before shutdown."""
        loop = GameLoop()
        state = MockState()
        window = Mock(spec=Window)
        window.handle_events.return_value = True

        update_completed = False
        draw_completed = False

        def update_with_stop(dt):
            loop.stop()
            nonlocal update_completed
            update_completed = True

        def draw_tracking(window):
            nonlocal draw_completed
            draw_completed = True

        state.update = update_with_stop
        state.draw = draw_tracking

        loop.set_state(state)
        loop.run(window)

        assert update_completed, "Update didn't complete"
        assert draw_completed, "Draw didn't complete after stop"


class TestDeltaTimeCalculation:
    """UTF-Block-P0-S1-C2-T4: Delta Time Calculation tests."""

    def test_delta_time_reflects_frame_duration(self):
        """Test delta time matches actual frame duration."""
        loop = GameLoop(target_fps=60)
        state = MockState()
        window = Mock(spec=Window)
        window.handle_events.return_value = True

        # Collect delta times
        collected_dts = []

        def collect_dt(dt):
            collected_dts.append(dt)
            if len(collected_dts) >= 5:
                loop.stop()

        state.update = collect_dt

        loop.set_state(state)
        loop.run(window)

        # All delta times should be positive
        assert all(dt > 0 for dt in collected_dts), "Negative delta time found"

    def test_delta_time_capped(self):
        """Test delta time is capped at maximum value."""
        loop = GameLoop(target_fps=60)
        state = MockState()
        window = Mock(spec=Window)
        window.handle_events.return_value = True

        # Simulate a long frame
        with patch("time.perf_counter") as mock_time:
            # perf_counter is called 3 times per frame: start, end, sleep check
            # Frame 1: 0.0 (start), 0.1 (end), 0.1 (sleep) - dt = 0.1
            # Frame 2: 0.1 (start), 0.2 (end), 0.2 (sleep) - dt = 0.1
            # Frame 3: 0.2 (start), 0.3 (end), 0.3 (sleep) - dt = 0.1
            times = [0.0, 0.1, 0.1, 0.1, 0.2, 0.2, 0.2, 0.3, 0.3]
            mock_time.side_effect = times

            dt_values = []

            def capture_dt(dt):
                dt_values.append(dt)
                if len(dt_values) >= 2:
                    loop.stop()

            state.update = capture_dt

            loop.set_state(state)
            loop.run(window)

            # Delta time should be capped at 50ms (0.05s)
            assert all(dt <= 0.05 for dt in dt_values), "Delta time not capped"

    def test_delta_time_never_negative(self):
        """Test delta time is never negative."""
        loop = GameLoop(target_fps=60)
        state = MockState()
        window = Mock(spec=Window)
        window.handle_events.return_value = True

        # Run for several frames
        frames = 0

        def check_dt(dt):
            nonlocal frames
            assert dt >= 0, f"Negative delta time: {dt}"
            frames += 1
            if frames >= 10:
                loop.stop()

        state.update = check_dt

        loop.set_state(state)
        loop.run(window)

        assert frames == 10, "Not all frames executed"
