# AI-Generated by CAFE v5.1-ACG - MIT License
"""Tests for debug display - Contract P0-S1-C3."""

from unittest.mock import Mock, patch

import pygame

from tower_climb.core.debug_display import DebugDisplay
from tower_climb.core.fps_counter import FPSCounter


class TestDebugDisplayRendering:
    """UTF-Block-P0-S1-C3-T2: Debug Display Rendering tests."""

    def test_debug_display_position(self):
        """Test debug info renders in top-left corner."""
        display = DebugDisplay()
        display.toggle()  # Make visible

        # Mock surface and font
        surface = Mock(spec=pygame.Surface)

        with patch("pygame.font.Font") as mock_font_class:
            mock_font = Mock()
            mock_text_surface = Mock(spec=pygame.Surface)
            mock_text_surface.get_rect.return_value = pygame.Rect(0, 0, 100, 20)
            mock_font.render.return_value = mock_text_surface
            mock_font_class.return_value = mock_font

            display.draw(surface)

            # Should blit in top-left area
            surface.blit.assert_called()
            call_args = surface.blit.call_args[0]
            position = call_args[1]
            assert position[0] <= 20  # X within 20 pixels of left
            assert position[1] <= 20  # Y within 20 pixels of top

    def test_text_readability(self):
        """Test text is readable with proper colors."""
        # Create display and manually check color
        display = DebugDisplay()

        # Check text color is white
        assert display._text_color == (255, 255, 255)

        # Check background is dark
        assert display._bg_color == (0, 0, 0)

    def test_background_rendering(self):
        """Test semi-transparent background is rendered."""
        display = DebugDisplay()
        display.toggle()  # Make visible

        surface = Mock(spec=pygame.Surface)
        surface.get_size.return_value = (800, 600)

        with patch("pygame.font.Font"):
            with patch("pygame.Surface") as mock_surface_class:
                mock_bg = Mock()
                mock_surface_class.return_value = mock_bg

                display.draw(surface)

                # Should create a background surface
                mock_surface_class.assert_called()
                # Should set alpha for transparency
                mock_bg.set_alpha.assert_called()
                alpha = mock_bg.set_alpha.call_args[0][0]
                assert 100 <= alpha <= 200  # Semi-transparent

    def test_font_size(self):
        """Test font size is appropriate."""
        with patch("pygame.font.Font") as mock_font_class:
            DebugDisplay()

            # Check font was created with appropriate size
            mock_font_class.assert_called()
            font_size = mock_font_class.call_args[0][1]
            assert 12 <= font_size <= 14


class TestDebugDisplayPerformance:
    """UTF-Block-P0-S1-C3-T3: Performance Impact tests."""

    def test_minimal_performance_impact(self):
        """Test debug display has minimal performance impact."""
        display = DebugDisplay()
        display.toggle()  # Make visible

        # Track render calls
        render_count = 0
        original_render = display._render_text

        def counting_render():
            nonlocal render_count
            render_count += 1
            original_render()

        display._render_text = counting_render

        # First draw
        surface = Mock(spec=pygame.Surface)
        display.update(0.016)  # One frame
        display.draw(surface)
        initial_count = render_count

        # Multiple updates with same FPS
        for _ in range(10):
            display.update(0.016)  # Same frame time
            display.draw(surface)

        # Should cache - minimal additional renders
        assert render_count <= initial_count + 2

    def test_update_only_on_change(self):
        """Test text updates only when values change."""
        display = DebugDisplay()
        display.toggle()  # Make visible

        with patch.object(display, "_render_text") as mock_render:
            # Same FPS values
            display.update(0.01667)  # 60 FPS
            display.update(0.01667)
            display.update(0.01667)

            # Should minimize rendering
            assert mock_render.call_count <= 2


class TestToggleFunctionality:
    """UTF-Block-P0-S1-C3-T4: Toggle Functionality tests."""

    def test_toggle_visibility(self):
        """Test debug display toggles visibility."""
        display = DebugDisplay()

        # Should start invisible
        assert not display.is_visible()

        # Toggle on
        display.toggle()
        assert display.is_visible()

        # Toggle off
        display.toggle()
        assert not display.is_visible()

    def test_state_persistence(self):
        """Test state persists between toggles."""
        display = DebugDisplay()

        # Set some state
        display.update(0.01667)
        display.toggle()  # Turn on

        # Toggle off and on
        display.toggle()  # Off
        display.toggle()  # On

        # State should persist
        assert display.is_visible()

    def test_rapid_toggle(self):
        """Test no crash if toggled rapidly."""
        display = DebugDisplay()

        # Rapid toggling
        for _ in range(100):
            display.toggle()

        # Should handle gracefully
        # Final state depends on even/odd toggles
        assert isinstance(display.is_visible(), bool)

    def test_toggle_no_side_effects(self):
        """Test toggle doesn't affect game state."""
        display = DebugDisplay()

        # Mock game state
        game_state = {"health": 100, "score": 0}

        # Toggle shouldn't modify external state
        display.toggle()
        assert game_state == {"health": 100, "score": 0}

        display.toggle()
        assert game_state == {"health": 100, "score": 0}
