# AI-Generated by CAFE v5.1-ACG - CC BY-NC 4.0 License
name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ["3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip (Windows)
      if: runner.os == 'Windows'
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Cache pip (Linux)
      if: runner.os == 'Linux'
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Check formatting with black
      run: |
        black --check src tests
    
    - name: Check import sorting with isort
      run: |
        isort src tests --check-only --diff
    
    - name: Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # Now run full linting (without --exit-zero to make it strict)
        flake8 src tests --count --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Type check with mypy
      run: |
        mypy src --ignore-missing-imports
    
    - name: Test with pytest
      run: |
        pytest --cov=src --cov-report=html --cov-report=term
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      with:
        name: coverage-report
        path: htmlcov/
    
    - name: Check coverage threshold
      run: |
        pytest --cov=src --cov-fail-under=80

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Security scan with bandit
      run: |
        # Run bandit and fail on any medium or high severity issues
        bandit -r src -ll -i
    
    - name: Check dependencies with safety
      run: |
        pip install -e .
        # Check for known security vulnerabilities
        safety check --json --output safety-report.json
        # Fail on any vulnerabilities found
        safety check

  license-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Check license headers
      run: |
        # Verify all Python files have correct license header
        python -c "
import os
import sys

license_header = '# AI-Generated by CAFE v5.1-ACG - CC BY-NC 4.0 License'
errors = []

for root, dirs, files in os.walk('src'):
    for file in files:
        if file.endswith('.py'):
            filepath = os.path.join(root, file)
            with open(filepath, 'r', encoding='utf-8') as f:
                first_line = f.readline().strip()
                if first_line != license_header:
                    errors.append(f'{filepath}: Missing or incorrect license header')

for root, dirs, files in os.walk('tests'):
    for file in files:
        if file.endswith('.py'):
            filepath = os.path.join(root, file)
            with open(filepath, 'r', encoding='utf-8') as f:
                first_line = f.readline().strip()
                if first_line != license_header:
                    errors.append(f'{filepath}: Missing or incorrect license header')

if errors:
    print('License header errors found:')
    for error in errors:
        print(f'  {error}')
    sys.exit(1)
else:
    print('All license headers are correct!')
        "